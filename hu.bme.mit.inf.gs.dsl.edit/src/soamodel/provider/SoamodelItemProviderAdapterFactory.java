/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package soamodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import soamodel.util.SoamodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SoamodelItemProviderAdapterFactory extends SoamodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SoamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.ServiceComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceComponentItemProvider serviceComponentItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.ServiceComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createServiceComponentAdapter() {
		if (serviceComponentItemProvider == null) {
			serviceComponentItemProvider = new ServiceComponentItemProvider(this);
		}

		return serviceComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.CSharpComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CSharpComponentItemProvider cSharpComponentItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.CSharpComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCSharpComponentAdapter() {
		if (cSharpComponentItemProvider == null) {
			cSharpComponentItemProvider = new CSharpComponentItemProvider(this);
		}

		return cSharpComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.JEEComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JEEComponentItemProvider jeeComponentItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.JEEComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createJEEComponentAdapter() {
		if (jeeComponentItemProvider == null) {
			jeeComponentItemProvider = new JEEComponentItemProvider(this);
		}

		return jeeComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.ServiceMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceMethodItemProvider serviceMethodItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.ServiceMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createServiceMethodAdapter() {
		if (serviceMethodItemProvider == null) {
			serviceMethodItemProvider = new ServiceMethodItemProvider(this);
		}

		return serviceMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.BuiltInDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuiltInDataTypeItemProvider builtInDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.BuiltInDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBuiltInDataTypeAdapter() {
		if (builtInDataTypeItemProvider == null) {
			builtInDataTypeItemProvider = new BuiltInDataTypeItemProvider(this);
		}

		return builtInDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.CollectionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionTypeItemProvider collectionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.CollectionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCollectionTypeAdapter() {
		if (collectionTypeItemProvider == null) {
			collectionTypeItemProvider = new CollectionTypeItemProvider(this);
		}

		return collectionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.ServiceOrientedArchitecture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceOrientedArchitectureItemProvider serviceOrientedArchitectureItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.ServiceOrientedArchitecture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createServiceOrientedArchitectureAdapter() {
		if (serviceOrientedArchitectureItemProvider == null) {
			serviceOrientedArchitectureItemProvider = new ServiceOrientedArchitectureItemProvider(this);
		}

		return serviceOrientedArchitectureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.Enum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumItemProvider enumItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.Enum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEnumAdapter() {
		if (enumItemProvider == null) {
			enumItemProvider = new EnumItemProvider(this);
		}

		return enumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.EnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumLiteralItemProvider enumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.EnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEnumLiteralAdapter() {
		if (enumLiteralItemProvider == null) {
			enumLiteralItemProvider = new EnumLiteralItemProvider(this);
		}

		return enumLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.OSGiComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OSGiComponentItemProvider osGiComponentItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.OSGiComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOSGiComponentAdapter() {
		if (osGiComponentItemProvider == null) {
			osGiComponentItemProvider = new OSGiComponentItemProvider(this);
		}

		return osGiComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.OCLPostcondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLPostconditionItemProvider oclPostconditionItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.OCLPostcondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOCLPostconditionAdapter() {
		if (oclPostconditionItemProvider == null) {
			oclPostconditionItemProvider = new OCLPostconditionItemProvider(this);
		}

		return oclPostconditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.OCLDataConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLDataConstraintItemProvider oclDataConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.OCLDataConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOCLDataConstraintAdapter() {
		if (oclDataConstraintItemProvider == null) {
			oclDataConstraintItemProvider = new OCLDataConstraintItemProvider(this);
		}

		return oclDataConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.OCLPrecondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLPreconditionItemProvider oclPreconditionItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.OCLPrecondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOCLPreconditionAdapter() {
		if (oclPreconditionItemProvider == null) {
			oclPreconditionItemProvider = new OCLPreconditionItemProvider(this);
		}

		return oclPreconditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link soamodel.RestMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestMethodItemProvider restMethodItemProvider;

	/**
	 * This creates an adapter for a {@link soamodel.RestMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRestMethodAdapter() {
		if (restMethodItemProvider == null) {
			restMethodItemProvider = new RestMethodItemProvider(this);
		}

		return restMethodItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (serviceComponentItemProvider != null) serviceComponentItemProvider.dispose();
		if (cSharpComponentItemProvider != null) cSharpComponentItemProvider.dispose();
		if (jeeComponentItemProvider != null) jeeComponentItemProvider.dispose();
		if (serviceMethodItemProvider != null) serviceMethodItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (builtInDataTypeItemProvider != null) builtInDataTypeItemProvider.dispose();
		if (collectionTypeItemProvider != null) collectionTypeItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (serviceOrientedArchitectureItemProvider != null) serviceOrientedArchitectureItemProvider.dispose();
		if (enumItemProvider != null) enumItemProvider.dispose();
		if (enumLiteralItemProvider != null) enumLiteralItemProvider.dispose();
		if (osGiComponentItemProvider != null) osGiComponentItemProvider.dispose();
		if (oclPostconditionItemProvider != null) oclPostconditionItemProvider.dispose();
		if (oclDataConstraintItemProvider != null) oclDataConstraintItemProvider.dispose();
		if (oclPreconditionItemProvider != null) oclPreconditionItemProvider.dispose();
		if (restMethodItemProvider != null) restMethodItemProvider.dispose();
	}

}
